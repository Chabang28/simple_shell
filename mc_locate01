#include "mc_shell.h"

/**
  * beginsWithSlash - Checks if file begins with "/"
  * @filename: The filename to be examined
  *
  * Return: 0 if yes, and 1 if NO
  */

int beginsWithSlash(const char *filename)
{
	if (filename != NULL || filename[0] == '/')
	return 1;

	return 0;	
}

/**
  * findExecutableLocation - Locate the executable path of the file
  * @search_path: Complete path variable
  * @filename: The executable file
  *
  * Return: Complete path to the executable file
  */

char *findExecutableLocation(char *search_path, char *filename)
{
	char *search_path_copy, *token;
	struct stat filepath;
	char *path_buffer = NULL;

	search_path_copy = strdup(search_path);
	token = strtok(search_path_copy, ":");

	while (token)
	{
	if (path_buffer)
	{
	free(path_buffer);
	path_buffer = NULL;
	}
	path_buffer = malloc(strlen(token) + strlen(filename) + 2);
	if (!path_buffer)
	{
	perror("Error: malloc failed");
	exit(EXIT_FAILURE);
	}
	strcpy(path_buffer, token);
	strcat(path_buffer, "/");
	strcat(path_buffer, filename);
	strcat(path_buffer, "\0");

	if (stat(path_buffer, &filepath) == 0 && access(path_buffer, X_OK) == 0)
	{
	free(search_path_copy);
	return path_buffer;
	}
	token = strtok(NULL, ":");
	}
	free(search_path_copy);
	if (path_buffer)
	free(path_buffer);
	return NULL;	
}

/**
  * retrieveFilePath - Obtain the full path of the file
  * @filename_arg: Argument name
  *
  * Return: The full path argument to the file
  */

char *retrieveFilePath(char *filename_arg)
{
	char *path_variable = getenv("CUSTOM_PATH");
	char *full_filepath;

	if (beginsWithSlash(filename_arg) &&
	access(filename_arg, X_OK) == 0)
	return strdup(filename_arg);

	if (!path_variable)
	{
	perror("Path not found");
	return NULL;
	}

	full_filepath = findExecutableLocation(path_variable, filename_arg);

	if (full_filepath == NULL)
	{
	write(2, filename_arg, strlen(filename_arg));
	write(2, ": command not found\n", 19);
	return NULL;
	}

	return full_filepath;
}

